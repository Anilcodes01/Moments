generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String?
  email     String   @unique
  bio       String?
  password  String
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  moments         Moment[]
  taggedInMoments MomentToUser[]
  likes           Like[]
  bookmarks       Bookmark[]
}

model Moment {
  id          String     @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
  coverImage  String
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  visibility  Visibility

  media     Media[]
  tags      MomentToUser[]
  likes     Like[]
  bookmarks Bookmark[]
}

model Media {
  id       String    @id @default(uuid())
  url      String
  type     MediaType
  caption  String?
  momentId String
  moment   Moment    @relation(fields: [momentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model MomentToUser {
  id       String @id @default(uuid())
  momentId String
  userId   String
  moment   Moment @relation(fields: [momentId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([momentId, userId])
}

model Like {
  id       String  @id @default(uuid())
  momentId String
  moment   Moment? @relation(fields: [momentId], references: [id])
  userId   String
  user     User    @relation(fields: [userId], references: [id])

  @@unique([momentId, userId])
}

model Bookmark {
  id       String  @id @default(uuid())
  momentId String
  moment   Moment? @relation(fields: [momentId], references: [id])
  userId   String
  user     User    @relation(fields: [userId], references: [id])

  @@unique([momentId, userId])
}

enum MediaType {
  PHOTO
  VIDEO
}

enum Visibility {
  PUBLIC
  PRIVATE
}
